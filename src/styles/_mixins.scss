$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
	@if $separator == 'comma' or $separator == 'space' {
		@return append($list, null, $separator);
	}
	@if function-exists('list-separator') == true {
		@return list-separator($list);
	}
	// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
	$test-list: ();
	@each $item in $list {
		$test-list: append($test-list, $item, space);
	}
	@return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
	
	font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
	$result: ();
	$separator: rem-separator($values);
	@each $value in $values {
		@if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
			$result: append($result, $value / 1rem * $rem-baseline, $separator);
		} @else if
			type-of($value) ==
			'number' and
			unit($value) ==
			'px' and
			$to ==
			'rem'
		{
			$result: append($result, $value / $rem-baseline * 1rem, $separator);
		} @else if type-of($value) == 'list' {
			$value-separator: rem-separator($value);
			$value: rem-convert($to, $value...);
			$value: rem-separator($value, $value-separator);
			$result: append($result, $value, $separator);
		} @else {
			$result: append($result, $value, $separator);
		}
	}
	@return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
	@if $rem-px-only {
		@return rem-convert(px, $values...);
	} @else {
		@return rem-convert(rem, $values...);
	}
}

@mixin rem($properties, $values...) {
	@if type-of($properties) == 'map' {
		@each $property in map-keys($properties) {
			@include rem($property, map-get($properties, $property));
		}
	} @else {
		@each $property in $properties {
			@if $rem-fallback or $rem-px-only {
				#{$property}: rem-convert(px, $values...);
			}
			@if not $rem-px-only {
				#{$property}: rem-convert(rem, $values...);
			}
		}
	}
}

@mixin ieGrid($rows: 20, $columns: 4) {
	$grid-rows: $rows;
	$grid-columns: $columns;
	$grid-item: 0;
	$row-count: 1;
	@while $grid-rows > 0 {
		@for $i from 1 through $grid-columns {
			$grid-item: $grid-item + 1;

			&:nth-of-type( #{$grid-item} ) {
				grid-row: $row-count;
				grid-column: $i;
			}
		}
		$row-count: $row-count + 1;
		$grid-rows: $grid-rows - 1;
	}
}

/// Get font size and line height from nested font maps
/// @author Tommy Scribble
/// @param {String} $text-type - heading, para, anchor, button
/// @param {String} $size - xl, l, m,s, xs
/// @return {String} - font-size and line heihgt properties
@mixin font-get($text-type, $size) {
	@if map-has-key($fonts, $text-type) {
		$value: map-deep-get($fonts, $text-type, $size);
		@if type-of($value) == 'list' {
			font-size: nth($value, 1);
			@if (length($value) > 1) {
				line-height: nth($value, 2);
			}
		} @else {
			font-size: $value;
		}
	} @else {
		@error "One of your font properties is probably wrong (#{$text-type} #{$size}) please check the stylesheet";
	}
}
